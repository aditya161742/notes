Spring AOP:


-> The application is generally developed with multiple layers. A typical Java application has the following layers:

Web Layer: It exposes the services using the REST or web application.
Business Layer: It implements the business logic of an application.
Data Layer: It implements the persistence logic of the application.

The responsibility of each layer is different, but there are a few common aspects that apply to all layers are Logging, Security, validation, caching, etc. These common aspects are called cross-cutting concerns.


-> AOP (Aspect-Oriented Programming) is a programming pattern that allows  separation of the cross-cutting concern.

-> Using AOP, we define common functionality in one place. We are free to define how and where this functionality is applied without modifying the class to which we are applying the new feature. The cross-cutting concern can now be modularized into special classes, called aspect.


Terminology:

-> Advice: The advice is an action that we take either before or after the method execution. The action is a piece of code that invokes during the program execution. There are five types of advices in the Spring AOP framework: before, after, after-returning, after-throwing, and around advice. Advices are taken for a particular join point. We will discuss these advices further in this section.

-> Concerns: The concern is the behavior we want to have in a particular module of an application.

-> Cross-cutting concerns: The cross-cutting concern is a concern which is applicable throughout the application. This affects the entire application. For example, logging, security and data transfer are the concerns needed in almost every module of an application, thus they are the cross-cutting concerns.

-> Aspect: An aspect is a module that encapsulates advice and pointcuts and provides cross-cutting An application can have any number of aspects. We can implement an aspect using regular class annotated with @Aspect annotation.

-> Pointcut: A pointcut is an expression that selects one or more join points where advice is executed. We can define pointcuts using expressions or patterns. It uses different kinds of expressions that matched with the join points. In Spring Framework, AspectJ pointcut expression language is used.

-> Join point: A join point is a point in the application where we apply an AOP aspect. Or it is a specific execution instance of an advice. In AOP, join point can be a method execution, exception handling, changing object variable value, etc.

-> Target object: An object on which advices are applied, is called the target object. 

-> Weaving: Weaving is generating or editing code by directly modifying existing .class (byte-code) files. This can occur at different points in the application life cycle. Weaving can be done at compile time, at load time, or at runtime. Spring Framework uses this for AOP functionality. 

-> Proxy: It is an object that is created after applying advice to a target object is called proxy.


AspectJ vs Spring AOP:

1) Spring AOP aims to provide a simple AOP implementation across Spring IoC to solve the most common problems that programmers face. It is not intended as a complete AOP solution – it can only be applied to beans that are managed by a Spring container.

On the other hand, AspectJ is the original AOP technology which aims to provide complete AOP solution. It is more robust but also significantly more complicated than Spring AOP. It's also worth noting that AspectJ can be applied across all domain objects.

2) As AspectJ uses compile time time weaving, Spring AOP makes use of runtime weaving.

3) Spring AOP is a proxy-based AOP framework. This means that to implement aspects to the target objects, it'll create proxies of that object. AspectJ, on the other hand, doesn't do anything at runtime as the classes are compiled directly with aspects.

4) Spring AOP is based on proxy patterns. Because of this, it needs to subclass the targeted Java class and apply cross-cutting concerns accordingly.

But it comes with a limitation. We cannot apply cross-cutting concerns (or aspects) across classes that are “final” because they cannot be overridden and thus it would result in a runtime exception.

However, AspectJ weaves the cross-cutting concerns directly into the actual code before runtime.

@Before:

-> Before advice is used in Aspect-Oriented Programming to achieve the cross-cutting. It is an advice type which ensures that an advice runs before the method execution. We use @Before annotation to implement the before advice.

Example:

@SpringBootApplication  
@EnableAspectJAutoProxy(proxyTargetClass=true)  
public class AopBeforeAdviceExampleApplication   
{  
	public static void main(String[] args) {  
		SpringApplication.run(AopBeforeAdviceExampleApplication.class, args);  
	}  
}  


public class Employee   
{  
	private String empId;  
	private String firstName;  
	private String secondName;  

}


@RestController  
public class EmployeeController   
{  
	@Autowired  
	private EmployeeService employeeService;  
	
	@RequestMapping(value = "/add/employee", method = RequestMethod.GET)  
	public com.javatpoint.model.Employee addEmployee(@RequestParam("empId") String empId, @RequestParam("firstName") String firstName, @RequestParam("secondName") String secondName)   
	{  
	return employeeService.createEmployee(empId, firstName, secondName);  
	}  
	
	@RequestMapping(value = "/remove/employee", method = RequestMethod.GET)  
	public String removeEmployee( @RequestParam("empId") String empId)   
	{  
	employeeService.deleteEmployee(empId);  
	return "Employee removed";  
	}  
}  


@Service  
public class EmployeeService   
{  
public Employee createEmployee( String empId, String fname, String sname)   
{  
Employee emp = new Employee();  
emp.setEmpId(empId);  
emp.setFirstName(fname);  
emp.setSecondName(sname);  
return emp;  
}  
public void deleteEmployee(String empId)   
{  
}  
}  


@Aspect  
@Component  
public class EmployeeServiceAspect   
{  

	//It will be called before createEmployee method of EmployeeService is called
	@Before(value = "execution(* com.javatpoint.service.EmployeeService.*(..)) and args(empId, fname, sname)")  
	public void beforeAdvice(JoinPoint joinPoint, String empId, String fname, String sname) {  

		log.info(
	      "Method {} executed with {} arguments",
	      joinPoint.getStaticPart().getSignature(),
	      joinPoint.getArgs()
	    );
		System.out.println("Before method:" + joinPoint.getSignature());  
		System.out.println("Creating Employee with first name - " + fname + ", second name - " + sname + " and id - " + empId);

	}  

	//It will be called before all method, with any argument, of EmployeeService is called
	@Before("execution(* com.howtodoinjava.app.service.impl.EmployeeManagerImpl.*(..))")
    public void logBeforeAllMethods(JoinPoint joinPoint) { ... }
}  


@After:

-> After advice is used in Aspect-Oriented Programming to achieve the cross-cutting. It is an advice type which ensures that an advice runs after the method execution. We use @After annotation to implement the after advice.

Example:

@Aspect  
@Component  
public class EmployeeServiceAspect   
{  
	
	//It will run after all method with defined arguments are called.
	@After(value = "execution(* com.javatpoint.service.EmployeeService.*(..)) and args(empId, fname, sname)")  
	public void afterAdvice(JoinPoint joinPoint, String empId, String fname, String sname) {  
	System.out.println("After method:" + joinPoint.getSignature());  
	System.out.println("Creating Employee with first name - " + fname + ", second name - " + sname + " and id - " + empId);  

	}  

}  


@Around:

-> Around advice is represented by @Around annotation. It executes before and after a join point. It is the most powerful advice. It also provides more control for end-user to get deal with ProceedingJoinPoint.


Example:

//Enables the spring AOP functionality in an application  
@Aspect  
@Component  
public class BankAspect  
{  

//Displays all the available methods i.e. the advice will be called for all the methods . In simple words whatever you specify inside @Before or @After is a pointcut expression. This can be extracted out into a separate method using @Pointcut annotation for better understanding, modularity and better control.

@Pointcut(value= "execution(* com.javatpoint.service.BankService.*(..))")  
private void logDisplayingBalance()   
{   
}  
//Declares the around advice that is applied before and after the method matching with a pointcut expression  
@Around(value= "logDisplayingBalance()")  
public void aroundAdvice(ProceedingJoinPoint jp) throws Throwable   
{  
System.out.println("The method aroundAdvice() before invokation of the method " + jp.getSignature().getName() + " method");  
try   
{  
jp.proceed();  
}   
finally   
{  
  
}  
System.out.println("The method aroundAdvice() after invokation of the method " + jp.getSignature().getName() + " method");  
}  
}  

JointPoint vs ProceedingJointPoint:

-> JointPoint contains different methods which are usful, for example, we can get method arguments , method name etc

		  joinPoint.getStaticPart().getSignature(),
	      joinPoint.getArgs()


-> Use JoinPoint with following advice types:

 @Before, @After, @AfterReturning, @AfterThrowing

-> Use ProceedingJoinPoint with following advice type: @Around

-> ProceedingJoinPoint is an extension of the JoinPoint that exposes the additional proceed() method. When invoked, the code execution jumps to the next advice or to the target method. It gives us the power to control the code flow and decide whether to proceed or not with further invocations.


@AfterThrowing:

@AfterThrowing(
  pointcut = "execution(* com.javatpoint.service.EmployeeService.*(..)) and args(empId, fname, sname)",
  throwing = "e"
)
public void logExceptions(JoinPoint jp, Exception e) {
    log.error(e.getMessage(), e);
}

-> By using the @AfterThrowing advice, we make sure the logging happens only when the exception occurs.


@AfterReturning:

-> After returning is an advice in Spring AOP that invokes after the execution of join point complete (execute) normally. It does not invoke if an exception is thrown. We can implement after returning advice in an application by using @AfterReturning annotation. 

Example:

	@AfterReturning(PointCut = "execution(* com.tutorialspoint.Student.*(..))", 
   returning = "retVal")
	public void afterReturningAdvice(JoinPoint jp, Object retVal){
	   System.out.println("Method Signature: "  + jp.getSignature());  
	   System.out.println("Returning value of the executed method:" + retVal.toString() );
	}



